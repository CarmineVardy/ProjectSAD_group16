package it.unisa.diem.sad.geoshapes.controller.strategy;

import it.unisa.diem.sad.geoshapes.controller.InteractionCallback;
import it.unisa.diem.sad.geoshapes.controller.decorator.PreviewShapeDecorator;
import it.unisa.diem.sad.geoshapes.controller.decorator.ShapeDecorator;
import javafx.geometry.Point2D;
import javafx.scene.Cursor;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Shape;

import java.util.Collections;
import java.util.List;

/**
 * Implements the {@link ToolStrategy} for drawing ellipses.
 * This strategy handles mouse events to allow users to create new ellipse shapes
 * on the drawing area, providing a real-time preview during the drawing process.
 */
public class EllipseToolStrategy implements ToolStrategy {

    // Public static final constants
    private static final double MIN_RADIUS = 1.0;

    // Private instance variables
    private final Pane drawingArea;
    private final InteractionCallback callback;

    private Ellipse previewFxShape;
    private ShapeDecorator previewDecorator;

    private double startX, startY, endX, endY;

    private Color borderColor;
    private Color fillColor;

    /**
     * Constructs a new {@code EllipseToolStrategy}.
     *
     * @param drawingArea The {@link Pane} where shapes will be drawn.
     * @param callback The {@link InteractionCallback} to notify about shape creation.
     */
    public EllipseToolStrategy(Pane drawingArea, InteractionCallback callback) {
        this.drawingArea = drawingArea;
        this.callback = callback;
    }

    /**
     * Activates the ellipse tool, setting its initial border and fill colors.
     *
     * @param lineBorderColor The current border color for lines (ignored).
     * @param rectangleBorderColor The current border color for rectangles (ignored).
     * @param rectangleFillColor The current fill color for rectangles (ignored).
     * @param ellipseBorderColor The current border color for ellipses.
     * @param ellipseFillColor The current fill color for ellipses.
     * @param polygonBorderColor The current border color for polygons (ignored).
     * @param polygonFillColor The current fill color for polygons (ignored).
     * @param textBorderColor The current border color for text shapes (ignored).
     * @param textFillColor The current fill color for text shapes (ignored).
     * @param textColor The current text color for text shapes (ignored).
     * @param polygonVertices The number of vertices for polygons (ignored).
     * @param regularPolygon A boolean indicating if the polygon should be regular (ignored).
     * @param fontSize The font size for text shapes (ignored).
     */
    @Override
    public void activate(Color lineBorderColor, Color rectangleBorderColor, Color rectangleFillColor, Color ellipseBorderColor, Color ellipseFillColor, Color polygonBorderColor, Color polygonFillColor, Color textBorderColor, Color textFillColor, Color textColor, int polygonVertices, boolean regularPolygon, int fontSize) {
        this.borderColor = ellipseBorderColor;
        this.fillColor = ellipseFillColor;
    }

    /**
     * Handles the mouse pressed event.
     * Starts the drawing of a new ellipse from the clicked point and
     * initializes a preview shape.
     *
     * @param event The {@link MouseEvent} generated by the mouse press.
     */
    @Override
    public void handleMousePressed(MouseEvent event) {
        // Reset any existing preview shape before starting a new one
        if (previewFxShape != null) {
            reset();
        }

        drawingArea.setCursor(Cursor.CROSSHAIR); // Change cursor to crosshair

        Point2D localPoint = drawingArea.sceneToLocal(event.getSceneX(), event.getSceneY());
        startX = localPoint.getX();
        startY = localPoint.getY();
        endX = startX; // Initialize end points to start points
        endY = startY;

        // Create the preview ellipse
        previewFxShape = new Ellipse(startX, startY, 0, 0);
        previewFxShape.setStroke(borderColor);
        previewFxShape.setFill(fillColor);
        previewFxShape.setStrokeWidth(2.0);

        // Apply preview decoration
        previewDecorator = new PreviewShapeDecorator(previewFxShape);
        previewDecorator.applyDecoration();

        drawingArea.getChildren().add(previewFxShape); // Add preview to drawing area
    }

    /**
     * Handles the mouse dragged event.
     * Updates the dimensions of the preview ellipse as the mouse is dragged,
     * maintaining the center and adjusting radii.
     *
     * @param event The {@link MouseEvent} generated by the mouse drag.
     */
    @Override
    public void handleMouseDragged(MouseEvent event) {
        if (previewFxShape == null) {
            return; // No preview shape to drag
        }

        Point2D localPoint = drawingArea.sceneToLocal(event.getSceneX(), event.getSceneY());
        endX = localPoint.getX();
        endY = localPoint.getY();

        double centerX = (startX + endX) / 2;
        double centerY = (startY + endY) / 2;
        double radiusX = Math.abs(endX - startX) / 2;
        double radiusY = Math.abs(endY - startY) / 2;

        previewFxShape.setCenterX(centerX);
        previewFxShape.setCenterY(centerY);
        previewFxShape.setRadiusX(radiusX);
        previewFxShape.setRadiusY(radiusY);
    }

    /**
     * Handles the mouse released event.
     * Finalizes the ellipse creation if its radii are above a minimum threshold,
     * otherwise, the preview is reset. Notifies the callback about the new shape.
     *
     * @param event The {@link MouseEvent} generated by the mouse release.
     */
    @Override
    public void handleMouseReleased(MouseEvent event) {
        drawingArea.setCursor(Cursor.DEFAULT); // Restore default cursor

        Point2D localPoint = drawingArea.sceneToLocal(event.getSceneX(), event.getSceneY());
        endX = localPoint.getX();
        endY = localPoint.getY();

        double radiusX = Math.abs(endX - startX) / 2;
        double radiusY = Math.abs(endY - startY) / 2;

        // Create shape only if dimensions are significant
        if (radiusX >= MIN_RADIUS && radiusY >= MIN_RADIUS) {
            callback.onCreateShape(previewFxShape); // Notify callback for shape creation
        } else {
            reset(); // Reset preview if too small
        }
    }

    /**
     * Handles the mouse moved event.
     * This implementation does nothing.
     *
     * @param event The {@link MouseEvent} generated by the mouse movement.
     */
    @Override
    public void handleMouseMoved(MouseEvent event) {
        // No specific action on mouse moved for this tool
    }

    /**
     * Handles a change in the line border color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the line border.
     */
    @Override
    public void handleLineBorderColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the rectangle border color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the rectangle border.
     */
    @Override
    public void handleRectangleBorderColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the rectangle fill color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the rectangle fill.
     */
    @Override
    public void handleRectangleFillColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the ellipse border color property.
     * Updates the internal border color used for new ellipses.
     *
     * @param color The new {@link Color} for the ellipse border.
     */
    @Override
    public void handleEllipseBorderColorChange(Color color) {
        this.borderColor = color;
    }

    /**
     * Handles a change in the ellipse fill color property.
     * Updates the internal fill color used for new ellipses.
     *
     * @param color The new {@link Color} for the ellipse fill.
     */
    @Override
    public void handleEllipseFillColorChange(Color color) {
        this.fillColor = color;
    }

    /**
     * Handles a change in the polygon border color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the polygon border.
     */
    @Override
    public void handlePolygonBorderColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the polygon fill color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the polygon fill.
     */
    @Override
    public void handlePolygonFillColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the text shape's border color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the text shape's border.
     */
    @Override
    public void handleTextBorderColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the text shape's fill color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the text shape's fill.
     */
    @Override
    public void handleTextFillColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the text color property (ignored by this strategy).
     *
     * @param color The new {@link Color} for the text.
     */
    @Override
    public void handleTextColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the number of vertices for polygons (ignored by this strategy).
     *
     * @param polygonVertices The new number of vertices.
     */
    @Override
    public void handlePolygonVerticesChange(int polygonVertices) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the regular polygon property (ignored by this strategy).
     *
     * @param regularPolygon A boolean indicating if the polygon should be regular.
     */
    @Override
    public void handleRegularPolygon(boolean regularPolygon) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a change in the font size property for text shapes (ignored by this strategy).
     *
     * @param fontSize The new font size.
     */
    @Override
    public void handleFontSizeChange(int fontSize) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a key pressed event (ignored by this strategy).
     *
     * @param event The {@link KeyEvent} generated by the key press.
     */
    @Override
    public void handleKeyPressed(KeyEvent event) {
        // No specific action on key pressed for ellipse tool
    }

    /**
     * Handles a key typed event (ignored by this strategy).
     *
     * @param event The {@link KeyEvent} generated by the key typed action.
     */
    @Override
    public void handleKeyTyped(KeyEvent event) {
        // No specific action on key typed for ellipse tool
    }

    /**
     * Handles a generic border color change (ignored by this strategy).
     *
     * @param color The new {@link Color} for the border.
     */
    @Override
    public void handleBorderColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a generic fill color change (ignored by this strategy).
     *
     * @param color The new {@link Color} for the fill.
     */
    @Override
    public void handleFillColorChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a text color change from a context menu or global property panel (ignored by this strategy).
     *
     * @param color The new {@link Color} for the text.
     */
    @Override
    public void handleTextColorMenuChange(Color color) {
        // Not applicable for ellipse tool
    }

    /**
     * Handles a font size change from a context menu or global property panel (ignored by this strategy).
     *
     * @param fontSize The new font size.
     */
    @Override
    public void handleFontSizeMenuChange(int fontSize) {
        // Not applicable for ellipse tool
    }

    /**
     * Returns an empty list of selected shapes, as this tool is for creation, not selection.
     *
     * @return An empty {@code List} of JavaFX {@link Shape} objects.
     */
    @Override
    public List<Shape> getSelectedShapes() {
        return Collections.emptyList();
    }

    /**
     * Resets the tool's internal state, removing any active preview shape and its decoration.
     * This is called to clean up the canvas after an ellipse is finalized or cancelled.
     */
    @Override
    public void reset() {
        if (previewDecorator != null) {
            previewDecorator.removeDecoration();
            previewDecorator = null;
        }
        if (previewFxShape != null) {
            drawingArea.getChildren().remove(previewFxShape);
            previewFxShape = null;
        }
    }
}