package it.unisa.diem.sad.geoshapes.controller.strategy;

import javafx.event.Event; // This import is not used by any method in the interface, it can be removed.
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Shape;

import java.util.List;

/**
 * Defines the common interface for different drawing tools' behaviors (strategies)
 * in the Strategy design pattern. Each implementation of this interface
 * encapsulates the logic for a specific tool, such as selection, drawing lines, or rectangles.
 * This allows the {@link it.unisa.diem.sad.geoshapes.controller.MainController} to
 * switch between different tool behaviors dynamically.
 */
public interface ToolStrategy {

    /**
     * Activates the tool, initializing its internal state with the current color and property settings.
     * This method is called when the tool is selected by the user.
     *
     * @param lineBorderColor The current border color for lines.
     * @param rectangleBorderColor The current border color for rectangles.
     * @param rectangleFillColor The current fill color for rectangles.
     * @param ellipseBorderColor The current border color for ellipses.
     * @param ellipseFillColor The current fill color for ellipses.
     * @param polygonBorderColor The current border color for polygons.
     * @param polygonFillColor The current fill color for polygons.
     * @param textBorderColor The current border color for text shapes.
     * @param textFillColor The current fill color for text shapes.
     * @param textColor The current text color for text shapes.
     * @param polygonVertices The number of vertices for polygons.
     * @param regularPolygon A boolean indicating if the polygon should be regular.
     * @param fontSize The font size for text shapes.
     */
    void activate(Color lineBorderColor, Color rectangleBorderColor, Color rectangleFillColor, Color ellipseBorderColor, Color ellipseFillColor, Color polygonBorderColor, Color polygonFillColor, Color textBorderColor, Color textFillColor, Color textColor, int polygonVertices, boolean regularPolygon, int fontSize);

    /**
     * Handles the mouse pressed event for the active tool.
     *
     * @param event The {@link MouseEvent} generated by the mouse press.
     */
    void handleMousePressed(MouseEvent event);

    /**
     * Handles the mouse dragged event for the active tool.
     *
     * @param event The {@link MouseEvent} generated by the mouse drag.
     */
    void handleMouseDragged(MouseEvent event);

    /**
     * Handles the mouse released event for the active tool.
     *
     * @param event The {@link MouseEvent} generated by the mouse release.
     */
    void handleMouseReleased(MouseEvent event);

    /**
     * Handles the mouse moved event for the active tool.
     * This can be used to update the cursor or show tooltips.
     *
     * @param event The {@link MouseEvent} generated by the mouse movement.
     */
    void handleMouseMoved(MouseEvent event);

    /**
     * Handles a change in the line border color property.
     *
     * @param color The new {@link Color} for the line border.
     */
    void handleLineBorderColorChange(Color color);

    /**
     * Handles a change in the rectangle border color property.
     *
     * @param color The new {@link Color} for the rectangle border.
     */
    void handleRectangleBorderColorChange(Color color);

    /**
     * Handles a change in the rectangle fill color property.
     *
     * @param color The new {@link Color} for the rectangle fill.
     */
    void handleRectangleFillColorChange(Color color);

    /**
     * Handles a change in the ellipse border color property.
     *
     * @param color The new {@link Color} for the ellipse border.
     */
    void handleEllipseBorderColorChange(Color color);

    /**
     * Handles a change in the ellipse fill color property.
     *
     * @param color The new {@link Color} for the ellipse fill.
     */
    void handleEllipseFillColorChange(Color color);

    /**
     * Handles a change in the polygon border color property.
     *
     * @param color The new {@link Color} for the polygon border.
     */
    void handlePolygonBorderColorChange(Color color);

    /**
     * Handles a change in the polygon fill color property.
     *
     * @param color The new {@link Color} for the polygon fill.
     */
    void handlePolygonFillColorChange(Color color);

    /**
     * Handles a change in the text shape's border color property.
     *
     * @param color The new {@link Color} for the text shape's border.
     */
    void handleTextBorderColorChange(Color color);

    /**
     * Handles a change in the text shape's fill color property.
     *
     * @param color The new {@link Color} for the text shape's fill.
     */
    void handleTextFillColorChange(Color color);

    /**
     * Handles a change in the text color property.
     *
     * @param color The new {@link Color} for the text.
     */
    void handleTextColorChange(Color color);

    /**
     * Handles a change in the number of vertices for polygons.
     *
     * @param polygonVertices The new number of vertices.
     */
    void handlePolygonVerticesChange(int polygonVertices);

    /**
     * Handles a change in the regular polygon property.
     *
     * @param regularPolygon A boolean indicating if the polygon should be regular.
     */
    void handleRegularPolygon(boolean regularPolygon);

    /**
     * Handles a change in the font size property for text shapes.
     *
     * @param fontSize The new font size.
     */
    void handleFontSizeChange(int fontSize);

    /**
     * Handles a key pressed event for the active tool.
     *
     * @param event The {@link KeyEvent} generated by the key press.
     */
    void handleKeyPressed(KeyEvent event);

    /**
     * Handles a key typed event for the active tool.
     *
     * @param event The {@link KeyEvent} generated by the key typed action.
     */
    void handleKeyTyped(KeyEvent event);

    /**
     * Handles a generic border color change, typically from a context menu or global property panel.
     *
     * @param color The new {@link Color} for the border.
     */
    void handleBorderColorChange(Color color);

    /**
     * Handles a generic fill color change, typically from a context menu or global property panel.
     *
     * @param color The new {@link Color} for the fill.
     */
    void handleFillColorChange(Color color);

    /**
     * Handles a text color change from a context menu or global property panel.
     *
     * @param color The new {@link Color} for the text.
     */
    void handleTextColorMenuChange(Color color);

    /**
     * Handles a font size change from a context menu or global property panel.
     *
     * @param fontSize The new font size.
     */
    void handleFontSizeMenuChange(int fontSize);

    /**
     * Returns a list of shapes currently selected by the tool.
     *
     * @return A {@code List} of selected JavaFX {@link Shape} objects.
     */
    List<Shape> getSelectedShapes();

    /**
     * Resets the tool's internal state, clearing any temporary shapes or selections.
     * This is typically called when switching to another tool or on an ESCAPE key press.
     */
    void reset();
}