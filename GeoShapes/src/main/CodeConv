CONVENTIONS (ENGLISH)
GENERAL CONVENTIONS
To ensure consistency, readability, and maintainability of the code, precise coding conventions have been established.
All identifiers, including packages, classes, methods, variables, and constants, must be written exclusively in English, following an
international standard that facilitates integration with external libraries and improves understanding even by developers outside the team.
The recommended development environment for the project is IntelliJ IDEA , compatible with JavaFX and equipped with advanced tools for
refactoring and debugging. The project requires the use of Java 21.
The GUI of the program is developed using JavaFX, a modern framework for building user interfaces, alongside SceneBuilder for visual scene design.
IDE: IntelliJ IDEA
Developing technologies : Java , JavaFX, JUnit, SceneBuilder.

NAMING CONVENTIONS
Packages:
    Packages must be written in lowercase and have names that clearly represent their content.
    For example, the guipackage contains all graphic components (Scene and Controller), while myShapes groups the classes representing
    geometric myShapes etc.
Classes and Interfaces:
    Class names follow the UpperCamelCase style, where each word starts with a capital letter.
    The chosen names must be clear and representative of the object or concept they implement, such as “Shape” or “ColorPalette”
    Test classes, by convention, always end with the suffix Test, such as “ShapeTest”.
    Interfaces follow the same capitalization conventions as classes.
Methods:
    Method names are written in lowerCamelCase, starting with a lowercase letter and using verbs that clearly represent the performed action,
    such as “drawShape()”,”clearCanvas()” etc.
    Access and modification methods (getters and setters) must follow use the “get” and “set” prefix followed by the property
    name in UpperCamelCase, such as “getColor()” or “setColor().
    For boolean variables, getter methods can also be prefixed with “is” or “has” such as “isVisible”, “hasStrokeColor” etc.
Variables and Costants:
    Variables follow the lowerCamelCase convention and must be descriptive with respect to their content or purpose.
    For example, names like “shapeList” , “currentColor” etc.
    Constants are defined using the UPPER_SNAKE_CASE style, with uppercase letters separated by underscores.
    They are declared as “static final” and represent immutable values during program execution. (Examples: MAX_ZOOM_LEVEL, MIN_CANVAS_SIZE etc).

CODE STRUCTURE
The order of class members must follow this structure:
    Public “static final" constants.
    Private instance variables.
    Constructors.
    Public methods.
    Protected methods.
    Private methods.
    Inner classes (if present).
If one of the classes is declared as “public” , it must have the same name as the file and the other classes in the file cannot
be declared as public. They will be package-private by default, meaning they are only accessible within the same package.

COMMENTS AND DOCUMENTATION
All classes, public methods, and constructors must be documented using Javadoc to generate clear and navigable documentation.
Inline comments are acceptable only to explain complex logic and should avoid describing obvious operations.

TESTING
Testing must be done using JUnit.
Method names for tests must be descriptive and must be organized consistently with the package structure of the source code :
test classes are located in “src/test/java” .


CONVENTIONS (ITALIAN)
CONVENZIONI GENERALI
Per garantire coerenza, leggibilità e manutenibilità del codice, sono state definite delle precise convenzioni di codifica.
Tutti gli identificatori (inclusi package, classi, metodi, variabili e costanti) devono essere scritti esclusivamente in inglese,
seguendo uno standard internazionale.
Questo facilita l’integrazione con librerie esterne e rende il codice comprensibile anche a sviluppatori esterni al team.
L’ambiente di sviluppo consigliato per il progetto è IntelliJ IDEA, compatibile con JavaFX e dotato di strumenti avanzati
per il refactoring e il debugging.
Il progetto utilizza Java 21.
L’interfaccia grafica del programma è sviluppata con JavaFX in combinazione con SceneBuilder per la progettazione visuale delle scene.
Tecnologie di sviluppo: IDE: IntelliJ IDEA; Linguaggi e strumenti: Java, JavaFX, JUnit, SceneBuilder

CONVENZIONI SUI NOMI
Package
    Devono essere scritti in minuscolo.
    I nomi devono rappresentare chiaramente il contenuto.
    Esempio:
    gui contiene tutti i componenti grafici (Scene e Controller)
    myShapes raggruppa le classi che rappresentano le forme geometriche
Classi e Interfacce
    I nomi devono usare lo stile UpperCamelCase (ogni parola inizia con una maiuscola).
    Devono essere chiari e rappresentativi dell’oggetto o concetto implementato.
    Esempi: Shape, ColorPalette
    Le classi di test terminano sempre con il suffisso Test
    Esempio: ShapeTest
    Le interfacce seguono le stesse convenzioni di maiuscolazione delle classi.
Metodi
    Devono essere scritti in lowerCamelCase (iniziano con minuscola).
    Devono essere verbi che rappresentano chiaramente l’azione svolta.
    Esempi: drawShape(), clearCanvas()
    I getter e setter usano i prefissi get e set seguiti dal nome della proprietà in UpperCamelCase:
    Esempi: getColor(), setColor()
    Per variabili booleane, i getter possono usare i prefissi is o has:
    Esempi: isVisible, hasStrokeColor
Variabili e Costanti
    Le variabili seguono lo stile lowerCamelCase e devono avere nomi descrittivi rispetto al contenuto o allo scopo.
    Esempi: shapeList, currentColor
    Le costanti seguono lo stile UPPER_SNAKE_CASE (tutte maiuscole con underscore)
    Devono essere dichiarate come static final e rappresentano valori immutabili.
    Esempi: MAX_ZOOM_LEVEL, MIN_CANVAS_SIZE

STRUTTURA DEL CODICE
L’ordine degli elementi all’interno di una classe deve essere il seguente:
    Costanti pubbliche static final
    Variabili d’istanza private
    Costruttori
    Metodi pubblici
    Metodi protetti
    Metodi privati
    Classi interne (se presenti)
    Se una delle classi è dichiarata come public, deve avere lo stesso nome del file. Le altre classi all’interno dello stesso
    file non possono essere public e saranno per default package-private (accessibili solo all’interno dello stesso package).

COMMENTI E DOCUMENTAZIONE
Tutte le classi, i metodi pubblici e i costruttori devono essere documentati usando Javadoc,
per generare una documentazione chiara e navigabile.
I commenti inline sono ammessi solo per spiegare logica complessa e devono evitare descrizioni ovvie o ridondanti.

TESTING
I test devono essere scritti utilizzando JUnit. I nomi dei metodi di test devono essere descrittivi.
La struttura dei test deve seguire l’organizzazione dei package del codice sorgente.
Le classi di test devono essere posizionate nella cartella: src/test/java